 Build a Top 10 Google Search Results Scraper

We need a scraper tool with the following functionality:

üåê Input Configuration
Search Query Input: Accept a user-provided keyword or phrase.

Localization Support:

Selectable Country for localized Google search (e.g. google.com, google.co.uk, google.fr, etc.).

Selectable Language to specify the language of results (e.g. English, French, etc.).

üîé Scraping Requirements
Search Engine: Perform a real-time Google search using the above configurations.

Top 10 Results: Retrieve and scrape only the first page of results (typically top 10 organic links, excluding ads and local packs).

üìÑ Data Extraction per Page
For each of the 10 result URLs:

Title Tag

Meta Description

Main Page Content:

Full visible text content (ideally cleaned of navigation, footer, and script noise)

Optional: article <h1>, <h2> hierarchy if available

üß© Optional Enhancements
Proxy/VPN support to avoid blocking by Google (can rotate IPs or user agents).

Delay/random wait between requests to mimic human behavior.

Export data as CSV/JSON including:

URL

Title

Meta Description

Cleaned Content

Country / Language used

Let me know if you also want me to help you code or plan this scraper in Python using libraries like requests, BeautifulSoup, SerpAPI, or browser automation with Playwright or Selenium.








You said:
we wil use node js enhance the prompt more


ChatGPT said:
Great ‚Äî here's a more detailed and refined prompt tailored specifically for building your Top 10 Google Search Results Scraper using Node.js:

üîß Prompt: Build a Node.js-Based Top 10 Google Search Results Scraper with Full Page Data Extraction
We want to develop a robust Node.js application that performs Google search scraping and extracts comprehensive page-level content from the top 10 organic results. The tool should support localization options and output structured data suitable for SEO, NLP, or competitive analysis.

‚úÖ Core Features
üîç Search Input & Localization
Keyword Input: Accept any search keyword or phrase via CLI, API endpoint, or frontend form.

Country Selector: Allow selection of the Google TLD for country-specific results (e.g. google.com, google.co.uk, google.ca, google.de).

Language Selector: Support hl (host language) parameter to control Google search result language (e.g. en, fr, es).

Device Simulation: Optional support to simulate desktop or mobile user agents.

üìÑ Search Result Scraping
Target: Scrape the top 10 organic search results (excluding ads, featured snippets, and other SERP modules).

Data to Extract from Google SERP:

Title (<h3> or relevant tag)

Snippet (description)

Final resolved URL

Use either:

Puppeteer/Playwright for headless browsing and JavaScript rendering, or

Cheerio with axios/got if accessing static HTML (note: Google SERPs often require headless browsers to avoid bot detection).

üåê Full Page Content Scraping (Each URL)
For each of the 10 result URLs:

Page Title (<title>)

Meta Description (<meta name="description">)

Main Text Content:

Clean body text (remove navbars, sidebars, footers, scripts)

Optionally extract structured headers (<h1>, <h2>, <p>, etc.)

Canonical URL (if available)

Word Count or Read Time Estimate (optional)

Use jsdom, cheerio, or headless browser rendering depending on the complexity of the page and presence of JavaScript content.

‚öôÔ∏è Settings & Config Options
Proxy/VPN Support: Ability to route requests through rotating proxies or VPNs (e.g., via ProxyMesh, BrightData, or ExpressVPN CLI integration).

Rate Limiting: Configurable delay or randomized interval between requests to mimic human behavior.

Custom Headers/User Agent: Rotate user-agent strings to reduce bot detection risk.

üì¶ Output Format
JSON or CSV Export including:

json
Copy
Edit
{
  "keyword": "best node.js frameworks",
  "country": "US",
  "language": "en",
  "results": [
    {
      "url": "https://example.com",
      "title": "Top Node.js Frameworks in 2025",
      "metaDescription": "Explore the most popular Node.js frameworks...",
      "content": "Node.js is a powerful platform...",
      "wordCount": 1350
    },
    ...
  ]
}
Store data locally or optionally export to MongoDB, PostgreSQL, or Firebase for later use.

üõ†Ô∏è Tech Stack
Node.js (v18+)

Playwright or Puppeteer for headless browsing

Cheerio + axios or got for lightweight HTML parsing

Commander.js or Express.js (CLI or API interface)

dotenv for environment configuration

csv-writer or fs for file exports

üß† Future Enhancements (Optional)
Auto keyword input via list or CSV

Google Trends or People Also Ask (PAA) integration

Sentiment analysis or keyword density from scraped content

Integration with NLP tools or OpenAI/Gemini for content summarization

Let me know if you‚Äôd like the starter code or help modularizing the architecture.








You said:
we want this tool to help us with on page seo analyse competetions enhance my prompt  use your webseach tools and dev to get a world class prompt


ChatGPT said:
Certainly! Here's a refined and comprehensive prompt tailored for developing a world-class Node.js-based SEO competitor analysis tool. This tool is designed to scrape the top 10 Google search results for a given keyword, extract detailed on-page SEO elements, and facilitate in-depth competitive analysis.

üõ†Ô∏è Project Prompt: Develop a Node.js SEO Competitor Analysis Tool
Objective:
Create a Node.js application that automates the process of analyzing the top 10 Google search results for a specific keyword. The tool should extract and compile comprehensive on-page SEO data from each result to aid in competitive analysis and strategy development.

üîç Core Functionalities
Keyword Input & Localization:

Accept user-defined search keywords.

Allow selection of country-specific Google domains (e.g., google.com, google.co.uk, google.fr).

Support language preferences for search results.

Google SERP Scraping:

Utilize headless browsers like Puppeteer or Playwright to navigate and scrape Google search results.

Extract the top 10 organic search results, capturing:

Page Title

URL

Meta Description

Snippet Text

On-Page SEO Data Extraction:

For each of the top 10 URLs, fetch and parse the page content to extract:

<title> tag content

<meta name="description"> content

<meta name="robots"> directives

<link rel="canonical"> URL

Heading tags (<h1> to <h6>)

Image alt attributes

Internal and external link counts

Word count and keyword density

Presence of structured data (e.g., JSON-LD, Microdata)

Mobile-friendliness indicators (e.g., viewport meta tag)

Data Analysis & Reporting:

Compare extracted data across all 10 pages to identify common SEO patterns.

Highlight areas where competitors are optimizing effectively.

Generate actionable insights and recommendations for on-page SEO improvements.

Output & Export:

Present findings in a structured format (e.g., JSON, CSV).

Optionally, generate a visual report (e.g., HTML or PDF) summarizing the analysis.

‚öôÔ∏è Technical Specifications
Programming Language: Node.js

Libraries & Tools:

Puppeteer or Playwright for headless browser automation.

Cheerio for HTML parsing and manipulation.

Axios or node-fetch for HTTP requests.

dotenv for environment variable management.

csv-writer or similar for CSV export functionality.

Performance Considerations:

Implement rate limiting and randomized delays between requests to mimic human behavior.

Incorporate proxy support to manage IP rotation and avoid potential blocking by Google.

Handle potential CAPTCHA challenges gracefully.

üìà Advanced Features (Optional Enhancements)
SERP Feature Detection:

Identify presence of featured snippets, knowledge panels, or other SERP features for the target keyword.

Keyword Variation Analysis:

Extract and analyze keyword variations and related search terms from SERPs.

Competitor Tracking:

Maintain a history of competitor rankings and on-page SEO changes over time.

Integration with Analytics Tools:

Correlate on-page SEO data with traffic metrics from tools like Google Analytics or Search Console.

üß† Use Cases
SEO Professionals: Gain insights into competitor strategies and identify opportunities for optimization.

Content Marketers: Understand how top-ranking content is structured and optimized.

Webmasters: Benchmark website SEO performance against top competitors.

By developing this tool, you'll empower users to conduct thorough on-page SEO analyses, uncover competitor strategies, and make data-driven decisions to enhance their own search engine rankings.

If you need assistance with specific implementation details or code examples, feel free to ask!









Sources
You said:
we will use google aip enhance prompt based on it


ChatGPT said:
Excellent ‚Äî integrating Google AIP (Advanced Information Processing) ‚Äî likely referring to Google‚Äôs Cloud Natural Language API, Knowledge Graph Search API, Custom Search JSON API, or related AI services ‚Äî adds a powerful layer of intelligence, NLP, and semantic understanding to your tool.

Here is a world-class, enterprise-grade prompt, enhanced with the assumption that you'll be using Node.js, Google AIP (NLP + SERP scraping + entity recognition), and advanced scraping/automation.

üöÄ Prompt: Build a Node.js-Powered On-Page SEO Competitive Analysis Tool with Google AIP
üéØ Objective
Design and build a Node.js-based application that performs Google Search result scraping, web content parsing, and advanced on-page SEO analysis using Google AIP services. This tool will help analyze the top 10 competitors for any keyword across various regions and languages, delivering insights on how to outperform them in SERPs.

üß† Core Functional Modules
üîç 1. Keyword Input + Search Configuration
Accept a keyword or phrase via CLI, API, or web interface.

Dropdowns for:

Search country (Google domain selector, e.g., .com, .fr, .co.uk)

Language (e.g., en, fr, de, es)

Device type (desktop vs mobile user agents)

üåê 2. Top 10 SERP Scraper
Use Google Custom Search JSON API (or headless browser fallback with Playwright/Puppeteer).

Extract:

Final resolved URL

Title

Meta Description

Snippet (as shown in SERPs)

üß© 3. Full On-Page SEO Scraper
Visit each of the top 10 result pages and extract:

<title> tag, <meta name="description">, <meta name="robots">

<link rel="canonical">

All <h1> to <h6> headings

Image alt texts

Internal/external link counts

Word count

Content hierarchy (heading outline)

Structured data (JSON-LD, Microdata, RDFa)

üîç 4. Google AIP-Powered Analysis
Use the following Google APIs:

‚úÖ Google Natural Language API
Entity recognition (detect topics, brands, products)

Salience score for each keyword/topic

Sentiment analysis of pages

Syntax analysis for sentence structure richness

Content classification (know what category the page falls into)

‚úÖ Google Knowledge Graph Search API
Enrich entity data: get metadata, descriptions, Wikipedia links, etc.

Cross-reference entities to determine topic authority vs competitors

‚úÖ Optional: Cloud Vision API
Extract and understand text from images or analyze image types (logos, infographics, etc.)

üìä 5. Competitor SEO Benchmarking
Generate comparisons for:

Title length, keyword presence

Heading structure depth

Entity salience overlap vs your content

Average content length

Number of images, links, keyword density

Structured data usage

Sentiment tone vs intent match

üì§ 6. Output Format
Structured JSON or downloadable CSV

Optional: Generate PDF reports or visual dashboards using:

D3.js for visual SEO audit charts

Lighthouse CLI for page performance metrics

Example JSON format:

json
Copy
Edit
{
  "keyword": "best node.js frameworks",
  "language": "en",
  "country": "US",
  "results": [
    {
      "url": "https://example.com",
      "title": "Top Node.js Frameworks in 2025",
      "metaDescription": "Explore the most popular Node.js frameworks...",
      "headings": ["H1: Top Frameworks", "H2: Express", "H2: NestJS"],
      "entities": [
        { "name": "Express", "salience": 0.85, "type": "Organization" }
      ],
      "wordCount": 1500,
      "sentiment": "positive",
      "structuredData": true
    }
  ]
}
üõ†Ô∏è Tech Stack
Node.js (ES Modules)

Playwright or Puppeteer

Cheerio or jsdom

Google Cloud Natural Language API

Google Knowledge Graph API

Google Custom Search JSON API

csv-writer, pdfkit for export

üß† Advanced Use Cases
Auto-suggest missing semantic entities in your page

Suggest heading rewrites based on NLP classification

Show where competitors rank in E-E-A-T signals (Experience, Expertise, Authority, Trust)

Compare intent matching based on sentiment + keyword context

